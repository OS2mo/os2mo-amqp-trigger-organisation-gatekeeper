# SPDX-FileCopyrightText: 2022 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

stages:
  - lint
  - build
  - test
  - coverage
  - release


variables:
  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}

  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo-amqp-trigger-organisation-gatekeeper

  PYTEST_COV_MODULE: orggatekeeper
  PYTEST_COV_FAIL_UNDER: 100


# Conditions
#############
.if-default-branch-refs: &if-default-branch-refs
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.if-tag: &if-tag
  if: '$CI_COMMIT_TAG'

.if-merge-request: &if-merge-request
  if: '$CI_MERGE_REQUEST_IID'

.if-schedule: &if-schedule
  if: '$CI_PIPELINE_SOURCE == "schedule"'


# Workflow
###########
workflow:
  rules:
    - <<: *if-tag
    - <<: *if-default-branch-refs
    - <<: *if-merge-request


include:
  - project: labs/salt-automation
    ref: master
    file: /gitlab-ci-templates/common/autopub.v1.yml
  - project: labs/salt-automation
    ref: master
    file: gitlab-ci-templates/python/pytest.v1.yml
  - project: labs/salt-automation
    ref: master
    file: /gitlab-ci-templates/common/docker-release.v1.yml


Pre-commit:
  stage: lint
  interruptible: true
  needs: []
  image: python:3.10
  before_script:
    - pip install --no-cache-dir poetry
    - poetry install
  script:
    - poetry run pre-commit run --all-files


# Build
########
.build-base:
  stage: build
  needs: []
  image:
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]

.build:release-image:
  extends:
    - .build-base
  rules:
    - <<: *if-schedule
      when: never
    - when: on_success

Build:
  extends: .build:release-image
  # TODO: Use gitlab-ci-templates/common/docker-build-meta.v1.yml instead
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}
